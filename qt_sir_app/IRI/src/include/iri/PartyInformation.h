#ifndef PARTYINFORMATION_H_INCLUDED
#define PARTYINFORMATION_H_INCLUDED

#include "src/include/iri/ParametersFormat.h"

class PartyInformation: public AsnType
{
public:
  PartyInformationEnum		party_Qualifier;
  PartyInformationSeq		*partyIdentity;
  Services_Information		*services_Information;
  Supplementary_Services		*supplementary_Services_Information;
  Services_Data_Information		*services_Data_Information;

			PartyInformation();
			PartyInformation (const PartyInformation &);
			~PartyInformation();
  AsnType		*Clone() const;

  PartyInformation		&operator = (const PartyInformation &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;

//Begin of this was not generated by snacc

    void SetPartyQualifier(PartyInformationEnum partyQualifier);
    //Struct Party Identity
    void CreatePartyIdentityImei(const char* imei);
    void CreatePartyIdentityTei(const char* tei);
    void CreatePartyIdentityImsi(const char* imsi);
    void CreatePartyIdentityCallingPartyNumber(CallingPartyNumber::ChoiceIdEnum type, const char* str,int longitud);
    void CreatePartyIdentityCalledPartyNumber(CalledPartyNumber::ChoiceIdEnum type, const char* str,int longitud);
    void CreatePartyIdentityMsISDN(const char* msISDN);
    void CreatePartyIdentityE164_Format(const char* e164_Format);
    void CreatePartyIdentitySip_uri(const char* sip_uri);
    void CreatePartyIdentityTel_url(const char* tel_url);

    //Struct Services Information
    void AddServicesInformationISUP_Parameters(const char *str);
    void AddServicesInformationDSS1_Parameters_Codeset_0(const char *str);
    void AddServicesInformationMAP_Parameters(const char *str);
    //Struct Supplementary Services
    void CreateSupplementaryServicesInformation();
        //Struct StandardSupplementaryServices of SupplementaryServices
        void CreateStandardSupplementaryServices();
        void AddStandardSupplementaryServicesISUP_SS_parameters(const char *str);
        void AddStandardSupplementaryServicesDSS1_SS_parameters_codeset_0(const char *str);
        void AddStandardSupplementaryServicesDSS1_SS_parameters_codeset_4(const char *str);
        void AddStandardSupplementaryServicesDSS1_SS_parameters_codeset_5(const char *str);
        void AddStandardSupplementaryServicesDSS1_SS_parameters_codeset_6(const char *str);
        void AddStandardSupplementaryServicesDSS1_SS_parameters_codeset_7(const char *str);
        void AddStandardSupplementaryServicesDSS1_SS_Invoke_components(const char *str);
        void AddStandardSupplementaryServicesMAP_SS_Parameters(const char *str);
        void AddStandardSupplementaryServicesMAP_SS_Invoke_Components(const char *str);
        //Struct NonStandardSupplementaryServices of SupplementaryServices
        void CreateNonStandardSupplementaryServices();
        void AddNonStandardSupplementaryServicesSciData(const char *str);
        void AddNonStandardSupplementaryServicesSimpleIndication(SimpleIndication psimpleIndication);
        //List of OtherServices
        void AddOtherServices(const char *str);
        //Struct ServicesDataInformation
            //Struct GPRS_parameters of ServicesDataInformation
            void CreateServicesDataInformation();
            void CreateServicesDataInformationGPRS_Parameters();
            void CreateServicesDataInformationGPRS_Parameters_APN(const char *str);
            void CreateServicesDataInformationGPRS_Parameters_PDP_Type(const char *str);
            void CreateServicesDataInformationGPRS_Parameters_PDP_Address_Allocated_To_The_Target(const char *px25Address);
            void CreateServicesDataInformationGPRS_Parameters_PDP_Address_Allocated_To_The_Target(IPAddressEnum ip_type,IP_value::ChoiceIdEnum choiceIpTypeValue, const char *pipAddress );
            void CreateServicesDataInformationGPRS_Parameters_PDP_Address_Allocated_To_The_Target(IPAddressEnum ip_type,IP_value::ChoiceIdEnum choiceIpTypeValue, const char *pipAddress, IPAddressEnum1 choiceIpAssignment );
            //void CreateServicesDataInformationGPRS_Parameters();

//End of this was not generated by snacc

};


#endif // PARTYINFORMATION_H_INCLUDED
