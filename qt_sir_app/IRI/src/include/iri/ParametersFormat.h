//   NOTE: this is a machine generated file--editing not recommended
//
// ParametersFormat.h - class definitions for ASN.1 module ParametersFormat
//
//   This file was generated by snacc on Thu May 29 18:14:31 2008
//   UBC snacc by Mike Sample
//   A couple of enhancements made by IBM European Networking Center

#ifndef _ParametersFormat_h_
#define _ParametersFormat_h_
#include <iostream>
using namespace std;
#include <asn-incl.h>

//------------------------------------------------------------------------------
// class declarations:

class IPAddressEnum1;
class IPAddressEnum;
class SMS_reportSeqEnum2;
class SMS_reportSeqEnum1;
class SMS_reportSeqEnum;
class GeographicalCoordinatesEnum;
class PartyInformationEnum;
class LocalTimeStampEnum;
class MapDatum;
class CCLink_State;
class Intercepted_Call_State;
class SimpleIndication;
class GPRSEvent;
class TetraLocationSeq;
class CallingPartyNumber;
class CalledPartyNumber;
class ISUP_parameters;
class DSS1_parameters_codeset_0;
class MAP_parameters;
class Other_Services;
class ISUP_SS_parameters;
class DSS1_SS_parameters_codeset_0;
class DSS1_SS_parameters_codeset_4;
class DSS1_SS_parameters_codeset_5;
class DSS1_SS_parameters_codeset_6;
class DSS1_SS_parameters_codeset_7;
class DSS1_SS_Invoke_Components;
class MAP_SS_Invoke_Components;
class MAP_SS_Parameters;
class IP_value;
class SMS_reportSeq;
class Non_Standard_Supplementary_ServicesChoice;
class GSMLocationSeq2;
class GSMLocationSeq1;
class GSMLocationSeq;
class PartyInformationSeq;
class LocalTimeStamp;
class TetraLocation;
class GSMLocation;
class GeographicalCoordinates;
class GA_Point;
class GA_PointWithUnCertainty;
class Services_Information;
class Standard_Supplementary_Services;
class Non_Standard_Supplementary_Services;
class IPAddress;
class GA_PolygonSeq;
class Network_Element_Identifier;
class TimeStamp;
class GA_Polygon;
class Supplementary_Services;
class DataNodeAddress;
class Network_Identifier;
class UMTSLocation;
class GPRS_parameters;
class CommunicationIdentifier;
class Services_Data_Information;
class PartyInformation;
class Location;
class CallContentLinkCharacteristics;
class SMS_report;
class National_Parameters;
class National_HI2_ASN1parameters;

//------------------------------------------------------------------------------
// class definitions:

/* ENUMERATED { static1 (1), dynamic (2), notKnown (3) }  */
class IPAddressEnum1: public AsnEnum
{
public:
			IPAddressEnum1(): AsnEnum() {}
			IPAddressEnum1 (int i): AsnEnum (i) {}
  enum
  {
    static1 = 1,
    dynamic = 2,
    notKnown = 3
  };
};


/* ENUMERATED { iPV4 (0), iPV6 (1) }  */
class IPAddressEnum: public AsnEnum
{
public:
			IPAddressEnum(): AsnEnum() {}
			IPAddressEnum (int i): AsnEnum (i) {}
  enum
  {
    iPV4 = 0,
    iPV6 = 1
  };
};


/* ENUMERATED { yes (0), no (1), undefined (2) }  */
class SMS_reportSeqEnum2: public AsnEnum
{
public:
			SMS_reportSeqEnum2(): AsnEnum() {}
			SMS_reportSeqEnum2 (int i): AsnEnum (i) {}
  enum
  {
    yes = 0,
    no = 1,
    undefined = 2
  };
};


/* ENUMERATED { succeed_transfer (0), not_succeed_transfer (1), undefined (2) }  */
class SMS_reportSeqEnum1: public AsnEnum
{
public:
			SMS_reportSeqEnum1(): AsnEnum() {}
			SMS_reportSeqEnum1 (int i): AsnEnum (i) {}
  enum
  {
    succeed_transfer = 0,
    not_succeed_transfer = 1,
    undefined = 2
  };
};


/* ENUMERATED { target (0), server (1), undefined_party (2) }  */
class SMS_reportSeqEnum: public AsnEnum
{
public:
			SMS_reportSeqEnum(): AsnEnum() {}
			SMS_reportSeqEnum (int i): AsnEnum (i) {}
  enum
  {
    target = 0,
    server = 1,
    undefined_party = 2
  };
};


/* ENUMERATED { north (1), south (2) }  */
class GeographicalCoordinatesEnum: public AsnEnum
{
public:
			GeographicalCoordinatesEnum(): AsnEnum() {}
			GeographicalCoordinatesEnum (int i): AsnEnum (i) {}
  enum
  {
    north = 1,
    south = 2
  };
};


/* ENUMERATED { originating_Party (0), terminating_Party (1), forwarded_to_Party (2), gPRS_Target (3) }  */
class PartyInformationEnum: public AsnEnum
{
public:
			PartyInformationEnum(): AsnEnum() {}
			PartyInformationEnum (int i): AsnEnum (i) {}
  enum
  {
    originating_Party = 0,
    terminating_Party = 1,
    forwarded_to_Party = 2,
    gPRS_Target = 3
  };
};


/* ENUMERATED { notProvided (0), winterTime (1), summerTime (2) }  */
class LocalTimeStampEnum: public AsnEnum
{
public:
			LocalTimeStampEnum(): AsnEnum() {}
			LocalTimeStampEnum (int i): AsnEnum (i) {}
  enum
  {
    notProvided = 0,
    winterTime = 1,
    summerTime = 2
  };
};


/* OCTET STRING (SIZE (1..8)) */
typedef AsnOcts CC_Link_Identifier;

/* ENUMERATED { wGS84 (1), wGS72 (2), eD50 (3) }  */
class MapDatum: public AsnEnum
{
public:
			MapDatum(): AsnEnum() {}
			MapDatum (int i): AsnEnum (i) {}
  enum
  {
    wGS84 = 1,
    wGS72 = 2,
    eD50 = 3
  };
};


/* ENUMERATED { setUpInProcess (1), callActive (2), callReleased (3), lack_of_resource (4) }  */
class CCLink_State: public AsnEnum
{
public:
			CCLink_State(): AsnEnum() {}
			CCLink_State (int i): AsnEnum (i) {}
  enum
  {
    setUpInProcess = 1,
    callActive = 2,
    callReleased = 3,
    lack_of_resource = 4
  };
};


/* ENUMERATED { idle (1), setUpInProcess (2), connected (3) }  */
class Intercepted_Call_State: public AsnEnum
{
public:
			Intercepted_Call_State(): AsnEnum() {}
			Intercepted_Call_State (int i): AsnEnum (i) {}
  enum
  {
    idle = 1,
    setUpInProcess = 2,
    connected = 3
  };
};


/* OCTET STRING (SIZE (1..256)) */
typedef AsnOcts SciDataMode;

/* ENUMERATED { call_Waiting_Indication (0), add_conf_Indication (1), call_on_hold_Indication (2), retrieve_Indication (3), suspend_Indication (4), resume_Indication (5), answer_Indication (6) }  */
class SimpleIndication: public AsnEnum
{
public:
			SimpleIndication(): AsnEnum() {}
			SimpleIndication (int i): AsnEnum (i) {}
  enum
  {
    call_Waiting_Indication = 0,
    add_conf_Indication = 1,
    call_on_hold_Indication = 2,
    retrieve_Indication = 3,
    suspend_Indication = 4,
    resume_Indication = 5,
    answer_Indication = 6
  };
};


/* OCTET STRING (SIZE (1..25)) */
typedef AsnOcts LawfulInterceptionIdentifier;

/* OCTET STRING (SIZE (8..20)) */
typedef AsnOcts GPRSCorrelationNumber;

/* ENUMERATED { pDPContextActivation (1), startOfInterceptionWithPDPContextActive (2), pDPContextDeactivation (4), gPRSAttach (5), gPRSDetach (6), cellOrRAUpdate (10), sMS (11), pDPContextModification (13) }  */
class GPRSEvent: public AsnEnum
{
public:
			GPRSEvent(): AsnEnum() {}
			GPRSEvent (int i): AsnEnum (i) {}
  enum
  {
    pDPContextActivation = 1,
    startOfInterceptionWithPDPContextActive = 2,
    pDPContextDeactivation = 4,
    gPRSAttach = 5,
    gPRSDetach = 6,
    cellOrRAUpdate = 10,
    sMS = 11,
    pDPContextModification = 13
  };
};


/* OCTET STRING (SIZE (2)) */
typedef AsnOcts GPRSOperationErrorCode;

/* OCTET STRING (SIZE (1..25)) */
typedef AsnOcts X25Address;

class TetraLocationSeq: public AsnType
{
public:
  AsnInt		mcc;
  AsnInt		mnc;
  AsnInt		lai;
  AsnInt		*ci;

			TetraLocationSeq();
			//Begin this is not generated by snacc
			TetraLocationSeq(unsigned int pmcc, unsigned int pmnc, unsigned int plai);
			TetraLocationSeq(unsigned int pmcc, unsigned int pmnc, unsigned int plai, unsigned int pci);
			//End this is not generated by snacc
			TetraLocationSeq (const TetraLocationSeq &);
			~TetraLocationSeq();
  AsnType		*Clone() const;

  TetraLocationSeq		&operator = (const TetraLocationSeq &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class CallingPartyNumber: public AsnType
{
public:
  enum ChoiceIdEnum
  {
     iSUP_FormatCid = 0,
     dSS1_FormatCid = 1,
     mAP_FormatCid = 2
  };

  enum ChoiceIdEnum	choiceId;
  union
  {
     AsnOcts		*iSUP_Format;
     AsnOcts		*dSS1_Format;
     AsnOcts		*mAP_Format;
  };


			CallingPartyNumber();
			//Begin of this was not created by snacc
			CallingPartyNumber(ChoiceIdEnum pchoiceId, const char *str, int longitud);
			//Endof this was not created by snacc

			CallingPartyNumber (const CallingPartyNumber &);
			~CallingPartyNumber();

  AsnType		*Clone() const;

  CallingPartyNumber		&operator = (const CallingPartyNumber &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void			Print (std::ostream &os) const;
};


class CalledPartyNumber: public AsnType
{
public:
  enum ChoiceIdEnum
  {
     iSUP_FormatCid = 0,
     mAP_FormatCid = 1,
     dSS1_FormatCid = 2
  };

  enum ChoiceIdEnum	choiceId;
  union
  {
     AsnOcts		*iSUP_Format;
     AsnOcts		*mAP_Format;
     AsnOcts		*dSS1_Format;
  };


			CalledPartyNumber();

			//Begin of this was not created by snacc
			CalledPartyNumber(ChoiceIdEnum pchoiceId, const char *str, int longitud);
			//Endof this was not created by snacc

			CalledPartyNumber (const CalledPartyNumber &);
			~CalledPartyNumber();

  AsnType		*Clone() const;

  CalledPartyNumber		&operator = (const CalledPartyNumber &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void			Print (std::ostream &os) const;
};


class ISUP_parameters: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			ISUP_parameters() { count = 0; first = curr = last = NULL; }
			ISUP_parameters (const ISUP_parameters &);
			~ISUP_parameters();
  AsnType		*Clone() const;

  ISUP_parameters		&operator = (const ISUP_parameters &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  ISUP_parameters	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  ISUP_parameters	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  ISUP_parameters	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  ISUP_parameters	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class DSS1_parameters_codeset_0: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			DSS1_parameters_codeset_0() { count = 0; first = curr = last = NULL; }
			DSS1_parameters_codeset_0 (const DSS1_parameters_codeset_0 &);
			~DSS1_parameters_codeset_0();
  AsnType		*Clone() const;

  DSS1_parameters_codeset_0		&operator = (const DSS1_parameters_codeset_0 &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  DSS1_parameters_codeset_0	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  DSS1_parameters_codeset_0	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  DSS1_parameters_codeset_0	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  DSS1_parameters_codeset_0	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class MAP_parameters: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			MAP_parameters() { count = 0; first = curr = last = NULL; }
			MAP_parameters (const MAP_parameters &);
			~MAP_parameters();
  AsnType		*Clone() const;

  MAP_parameters		&operator = (const MAP_parameters &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  MAP_parameters	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  MAP_parameters	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  MAP_parameters	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  MAP_parameters	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class Other_Services: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			Other_Services() { count = 0; first = curr = last = NULL; }
			Other_Services (const Other_Services &);
			~Other_Services();
  AsnType		*Clone() const;

  Other_Services		&operator = (const Other_Services &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  Other_Services	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  Other_Services	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  Other_Services	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  Other_Services	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class ISUP_SS_parameters: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			ISUP_SS_parameters() { count = 0; first = curr = last = NULL; }
			ISUP_SS_parameters (const ISUP_SS_parameters &);
			~ISUP_SS_parameters();
  AsnType		*Clone() const;

  ISUP_SS_parameters		&operator = (const ISUP_SS_parameters &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  ISUP_SS_parameters	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  ISUP_SS_parameters	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  ISUP_SS_parameters	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  ISUP_SS_parameters	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class DSS1_SS_parameters_codeset_0: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			DSS1_SS_parameters_codeset_0() { count = 0; first = curr = last = NULL; }
			DSS1_SS_parameters_codeset_0 (const DSS1_SS_parameters_codeset_0 &);
			~DSS1_SS_parameters_codeset_0();
  AsnType		*Clone() const;

  DSS1_SS_parameters_codeset_0		&operator = (const DSS1_SS_parameters_codeset_0 &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  DSS1_SS_parameters_codeset_0	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  DSS1_SS_parameters_codeset_0	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  DSS1_SS_parameters_codeset_0	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  DSS1_SS_parameters_codeset_0	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class DSS1_SS_parameters_codeset_4: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			DSS1_SS_parameters_codeset_4() { count = 0; first = curr = last = NULL; }
			DSS1_SS_parameters_codeset_4 (const DSS1_SS_parameters_codeset_4 &);
			~DSS1_SS_parameters_codeset_4();
  AsnType		*Clone() const;

  DSS1_SS_parameters_codeset_4		&operator = (const DSS1_SS_parameters_codeset_4 &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  DSS1_SS_parameters_codeset_4	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  DSS1_SS_parameters_codeset_4	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  DSS1_SS_parameters_codeset_4	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  DSS1_SS_parameters_codeset_4	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class DSS1_SS_parameters_codeset_5: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			DSS1_SS_parameters_codeset_5() { count = 0; first = curr = last = NULL; }
			DSS1_SS_parameters_codeset_5 (const DSS1_SS_parameters_codeset_5 &);
			~DSS1_SS_parameters_codeset_5();
  AsnType		*Clone() const;

  DSS1_SS_parameters_codeset_5		&operator = (const DSS1_SS_parameters_codeset_5 &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  DSS1_SS_parameters_codeset_5	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  DSS1_SS_parameters_codeset_5	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  DSS1_SS_parameters_codeset_5	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  DSS1_SS_parameters_codeset_5	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class DSS1_SS_parameters_codeset_6: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			DSS1_SS_parameters_codeset_6() { count = 0; first = curr = last = NULL; }
			DSS1_SS_parameters_codeset_6 (const DSS1_SS_parameters_codeset_6 &);
			~DSS1_SS_parameters_codeset_6();
  AsnType		*Clone() const;

  DSS1_SS_parameters_codeset_6		&operator = (const DSS1_SS_parameters_codeset_6 &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  DSS1_SS_parameters_codeset_6	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  DSS1_SS_parameters_codeset_6	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  DSS1_SS_parameters_codeset_6	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  DSS1_SS_parameters_codeset_6	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class DSS1_SS_parameters_codeset_7: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			DSS1_SS_parameters_codeset_7() { count = 0; first = curr = last = NULL; }
			DSS1_SS_parameters_codeset_7 (const DSS1_SS_parameters_codeset_7 &);
			~DSS1_SS_parameters_codeset_7();
  AsnType		*Clone() const;

  DSS1_SS_parameters_codeset_7		&operator = (const DSS1_SS_parameters_codeset_7 &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  DSS1_SS_parameters_codeset_7	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  DSS1_SS_parameters_codeset_7	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  DSS1_SS_parameters_codeset_7	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  DSS1_SS_parameters_codeset_7	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class DSS1_SS_Invoke_Components: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			DSS1_SS_Invoke_Components() { count = 0; first = curr = last = NULL; }
			DSS1_SS_Invoke_Components (const DSS1_SS_Invoke_Components &);
			~DSS1_SS_Invoke_Components();
  AsnType		*Clone() const;

  DSS1_SS_Invoke_Components		&operator = (const DSS1_SS_Invoke_Components &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  DSS1_SS_Invoke_Components	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  DSS1_SS_Invoke_Components	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  DSS1_SS_Invoke_Components	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  DSS1_SS_Invoke_Components	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class MAP_SS_Invoke_Components: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			MAP_SS_Invoke_Components() { count = 0; first = curr = last = NULL; }
			MAP_SS_Invoke_Components (const MAP_SS_Invoke_Components &);
			~MAP_SS_Invoke_Components();
  AsnType		*Clone() const;

  MAP_SS_Invoke_Components		&operator = (const MAP_SS_Invoke_Components &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  MAP_SS_Invoke_Components	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  MAP_SS_Invoke_Components	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  MAP_SS_Invoke_Components	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  MAP_SS_Invoke_Components	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class MAP_SS_Parameters: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			MAP_SS_Parameters() { count = 0; first = curr = last = NULL; }
			MAP_SS_Parameters (const MAP_SS_Parameters &);
			~MAP_SS_Parameters();
  AsnType		*Clone() const;

  MAP_SS_Parameters		&operator = (const MAP_SS_Parameters &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  MAP_SS_Parameters	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  MAP_SS_Parameters	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  MAP_SS_Parameters	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  MAP_SS_Parameters	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class IP_value: public AsnType
{
public:
  enum ChoiceIdEnum
  {
     iPBinaryAddressCid = 0,
     iPTextAddressCid = 1
  };

  enum ChoiceIdEnum	choiceId;
  union
  {
     AsnOcts		*iPBinaryAddress;
     IA5String		*iPTextAddress;
  };



			IP_value();
			IP_value( ChoiceIdEnum pchoiceId, const char *str);//It is not of compiler
			IP_value (const IP_value &);
			~IP_value();

  AsnType		*Clone() const;

  IP_value		&operator = (const IP_value &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void			Print (std::ostream &os) const;
};


class SMS_reportSeq: public AsnType
{
public:
  SMS_reportSeqEnum		initiator;
  SMS_reportSeqEnum1		*transfer_status;
  SMS_reportSeqEnum2		*other_message;
  AsnOcts		*content;

			SMS_reportSeq();
			SMS_reportSeq (const SMS_reportSeq &);
			~SMS_reportSeq();
  AsnType		*Clone() const;

  SMS_reportSeq		&operator = (const SMS_reportSeq &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class Non_Standard_Supplementary_ServicesChoice: public AsnType
{
public:
  enum ChoiceIdEnum
  {
     simpleIndicationCid = 0,
     sciDataCid = 1
  };

  enum ChoiceIdEnum	choiceId;
  union
  {
     SimpleIndication		*simpleIndication;
     SciDataMode		*sciData;
  };


			Non_Standard_Supplementary_ServicesChoice();
            //Begin of this was not created by snacc
			Non_Standard_Supplementary_ServicesChoice(SimpleIndication psimpleIndication);
			Non_Standard_Supplementary_ServicesChoice(const char *psciData);
			//End of this was not created by snacc
			Non_Standard_Supplementary_ServicesChoice (const Non_Standard_Supplementary_ServicesChoice &);
			~Non_Standard_Supplementary_ServicesChoice();

  AsnType		*Clone() const;

  Non_Standard_Supplementary_ServicesChoice		&operator = (const Non_Standard_Supplementary_ServicesChoice &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void			Print (std::ostream &os) const;
};


class GSMLocationSeq2: public AsnType
{
public:
  PrintableString		utmref_string;
  MapDatum		*mapDatum;

			GSMLocationSeq2();
			//Begin this was not generated by snacc
			GSMLocationSeq2(const char *putmref_string,MapDatum  pmapDatum = MapDatum::wGS84);
            //End this was not generated by snacc
			GSMLocationSeq2 (const GSMLocationSeq2 &);
			~GSMLocationSeq2();
  AsnType		*Clone() const;

  GSMLocationSeq2		&operator = (const GSMLocationSeq2 &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class GSMLocationSeq1: public AsnType
{
public:
  PrintableString		utm_East;
  PrintableString		utm_North;
  MapDatum		*mapDatum;
  AsnInt		*azimuth;

			GSMLocationSeq1();
			//Begin this was not generated by snacc
			GSMLocationSeq1(const char *putm_East,const char *putm_North, MapDatum  pmapDatum= MapDatum::wGS84);
                        GSMLocationSeq1(const char *putm_East,const char *putm_North, unsigned int pazimuth, MapDatum  pmapDatum= MapDatum::wGS84);
            //End this was not generated by snacc
			GSMLocationSeq1 (const GSMLocationSeq1 &);
			~GSMLocationSeq1();
  AsnType		*Clone() const;

  GSMLocationSeq1		&operator = (const GSMLocationSeq1 &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class GSMLocationSeq: public AsnType
{
public:
  PrintableString		latitude;
  PrintableString		longitude;
  MapDatum		*mapDatum;
  AsnInt		*azimuth;

			GSMLocationSeq();
			//Begin this was not generated by snacc
			GSMLocationSeq(const char *platitude,const char *plongitude, MapDatum  pmapDatum= MapDatum::wGS84);
			GSMLocationSeq(const char *platitude,const char *plongitude, unsigned int pazimuth, MapDatum  pmapDatum= MapDatum::wGS84);
            //End this was not generated by snacc
			GSMLocationSeq (const GSMLocationSeq &);
			~GSMLocationSeq();
  AsnType		*Clone() const;

  GSMLocationSeq		&operator = (const GSMLocationSeq &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class PartyInformationSeq: public AsnType
{
public:
  AsnOcts		*imei;
  AsnOcts		*tei;
  AsnOcts		*imsi;
  CallingPartyNumber		*callingPartyNumber;
  CalledPartyNumber		*calledPartyNumber;
  AsnOcts		*msISDN;
  AsnOcts		*e164_Format;
  AsnOcts		*sip_uri;
  AsnOcts		*tel_url;

			PartyInformationSeq();
			PartyInformationSeq (const PartyInformationSeq &);
			~PartyInformationSeq();
  AsnType		*Clone() const;

  PartyInformationSeq		&operator = (const PartyInformationSeq &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class LocalTimeStamp: public AsnType
{
public:
  GeneralizedTime		generalizedTime;
  LocalTimeStampEnum		winterSummerIndication;

			LocalTimeStamp();
			//Begin this is not generated by snacc
			LocalTimeStamp(const char*generalizedTimeStr,LocalTimeStampEnum  pwinterSummerIndication);
			//End this is not generated by snacc
			LocalTimeStamp (const LocalTimeStamp &);
			~LocalTimeStamp();
  AsnType		*Clone() const;

  LocalTimeStamp		&operator = (const LocalTimeStamp &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class TetraLocation: public AsnType
{
public:
  enum ChoiceIdEnum
  {
     ms_LocCid = 0,
     ls_LocCid = 1
  };

  enum ChoiceIdEnum	choiceId;
  union
  {
     TetraLocationSeq		*ms_Loc;
     AsnInt		*ls_Loc;
  };


			TetraLocation();
			//Begin this was not generated by snacc
			TetraLocation(int pls_loc);
			TetraLocation(unsigned int mcc, unsigned int mnc, unsigned int lai);
			TetraLocation(unsigned int mcc, unsigned int mnc, unsigned int lai, int ci);
			//End this was not generated by snacc
			TetraLocation (const TetraLocation &);
			~TetraLocation();

  AsnType		*Clone() const;

  TetraLocation		&operator = (const TetraLocation &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void			Print (std::ostream &os) const;
};


class GSMLocation: public AsnType
{
public:
  enum ChoiceIdEnum
  {
     geoCoordinatesCid = 0,
     utmCoordinatesCid = 1,
     utmRefCoordinatesCid = 2,
     wGS84CoordinatesCid = 3
  };

  enum ChoiceIdEnum	choiceId;
  union
  {
     GSMLocationSeq		*geoCoordinates;
     GSMLocationSeq1		*utmCoordinates;
     GSMLocationSeq2		*utmRefCoordinates;
     AsnOcts		*wGS84Coordinates;
  };

			GSMLocation();
			//Begin of this was not generated by snacc
			void CreateGeoCoordinates(const char *platitude,const char *plongitude, MapDatum  pmapDatum= MapDatum::wGS84);
			void CreateGeoCoordinates(const char *platitude,const char *plongitude,  unsigned int pazimuth, MapDatum  pmapDatum= MapDatum::wGS84);
			void CreateUtmCoordinates(const char *putm_East,const char *putm_North, MapDatum  pmapDatum= MapDatum::wGS84);
			void CreateUtmCoordinates(const char *putm_East,const char *putm_North, unsigned int pazimuth, MapDatum  pmapDatum= MapDatum::wGS84);
            void CreateUtmRefCoordinates(const char *putmref_string,MapDatum  pmapDatum= MapDatum::wGS84);
            void CreateWGS84Coordinates( const char *pwGS84Coordinates);
			//End of this was not generated by snacc
			GSMLocation (const GSMLocation &);
			~GSMLocation();

  AsnType		*Clone() const;

  GSMLocation		&operator = (const GSMLocation &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void			Print (std::ostream &os) const;
};


class GeographicalCoordinates: public AsnType
{
public:
  GeographicalCoordinatesEnum		latitudeSign;
  AsnInt		latitude;
  AsnInt		longitude;

			GeographicalCoordinates();

			//Begin of this was not generated by compiler
			GeographicalCoordinates(GeographicalCoordinatesEnum platitudeSign,int platitude, int plongitude);
			//End of this was not generated by compiler

			GeographicalCoordinates (const GeographicalCoordinates &);
			~GeographicalCoordinates();
  AsnType		*Clone() const;

  GeographicalCoordinates		&operator = (const GeographicalCoordinates &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class GA_Point: public AsnType
{
public:
  GeographicalCoordinates		*geographicalCoordinates;

			GA_Point();

			//Begin of this was not generated by compiler
			GA_Point(GeographicalCoordinatesEnum platitudeSign,int platitude, int plongitude);
			//End of this was not generated by compiler

			GA_Point (const GA_Point &);
			~GA_Point();
  AsnType		*Clone() const;

  GA_Point		&operator = (const GA_Point &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class GA_PointWithUnCertainty: public AsnType
{
public:
  GeographicalCoordinates		*geographicalCoordinates;
  AsnInt		uncertaintyCode;

			GA_PointWithUnCertainty();

			//Begin of this was not generated by compiler
			GA_PointWithUnCertainty(GeographicalCoordinatesEnum platitudeSign,int platitude, int plongitude,unsigned int puncertaintyCode);
			//End of this was not generated by compiler

			GA_PointWithUnCertainty (const GA_PointWithUnCertainty &);
			~GA_PointWithUnCertainty();
  AsnType		*Clone() const;

  GA_PointWithUnCertainty		&operator = (const GA_PointWithUnCertainty &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class Services_Information: public AsnType
{
public:
  ISUP_parameters		*iSUP_parameters;
  DSS1_parameters_codeset_0		*dSS1_parameters_codeset_0;
  MAP_parameters		*mAP_parameters;

			Services_Information();
			Services_Information (const Services_Information &);
			~Services_Information();
  AsnType		*Clone() const;

  Services_Information		&operator = (const Services_Information &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class Standard_Supplementary_Services: public AsnType
{
public:
  ISUP_SS_parameters		*iSUP_SS_parameters;
  DSS1_SS_parameters_codeset_0		*dSS1_SS_parameters_codeset_0;
  DSS1_SS_parameters_codeset_4		*dSS1_SS_parameters_codeset_4;
  DSS1_SS_parameters_codeset_5		*dSS1_SS_parameters_codeset_5;
  DSS1_SS_parameters_codeset_6		*dSS1_SS_parameters_codeset_6;
  DSS1_SS_parameters_codeset_7		*dSS1_SS_parameters_codeset_7;
  DSS1_SS_Invoke_Components		*dSS1_SS_Invoke_components;
  MAP_SS_Parameters		*mAP_SS_Parameters;
  MAP_SS_Invoke_Components		*mAP_SS_Invoke_Components;

			Standard_Supplementary_Services();
			Standard_Supplementary_Services (const Standard_Supplementary_Services &);
			~Standard_Supplementary_Services();
  AsnType		*Clone() const;

  Standard_Supplementary_Services		&operator = (const Standard_Supplementary_Services &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class Non_Standard_Supplementary_Services: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    Non_Standard_Supplementary_ServicesChoice	*elmt;
  }			*first, *curr, *last;

public:
			Non_Standard_Supplementary_Services() { count = 0; first = curr = last = NULL; }
			Non_Standard_Supplementary_Services (const Non_Standard_Supplementary_Services &);
			~Non_Standard_Supplementary_Services();
  AsnType		*Clone() const;

  Non_Standard_Supplementary_Services		&operator = (const Non_Standard_Supplementary_Services &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  Non_Standard_Supplementary_ServicesChoice	*First() const	{ return count > 0 ? first->elmt : NULL; }
  Non_Standard_Supplementary_ServicesChoice	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  Non_Standard_Supplementary_ServicesChoice	*Curr() const	{ return curr ? curr->elmt : NULL; }
  Non_Standard_Supplementary_ServicesChoice	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  Non_Standard_Supplementary_ServicesChoice	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  Non_Standard_Supplementary_ServicesChoice	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  Non_Standard_Supplementary_ServicesChoice	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  Non_Standard_Supplementary_ServicesChoice	*Append();  // add elmt to end of list

  //Begin of This was no created by snacc
  Non_Standard_Supplementary_ServicesChoice	*Append(const char *sciData );
  Non_Standard_Supplementary_ServicesChoice	*Append(SimpleIndication psimpleIndication );
  //End of This was no created by snacc

  Non_Standard_Supplementary_ServicesChoice	*Prepend(); // add elmt to beginning of list
  Non_Standard_Supplementary_ServicesChoice	*InsertBefore(); //insert elmt before current elmt
  Non_Standard_Supplementary_ServicesChoice	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  Non_Standard_Supplementary_Services	&AppendCopy (Non_Standard_Supplementary_ServicesChoice &elmt);  // add elmt to end of list
  Non_Standard_Supplementary_Services	&PrependCopy (Non_Standard_Supplementary_ServicesChoice &elmt); // add elmt to beginning of list
  Non_Standard_Supplementary_Services	&InsertBeforeAndCopy (Non_Standard_Supplementary_ServicesChoice &elmt); //insert elmt before current elmt
  Non_Standard_Supplementary_Services	&InsertAfterAndCopy (Non_Standard_Supplementary_ServicesChoice &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class IPAddress: public AsnType
{
public:
  IPAddressEnum		iP_type;
  IP_value		*iP_value;
  IPAddressEnum1		*iP_assignment;

			IPAddress();
            //This is not implement by the snacc
            //Begin
			IPAddress( IPAddressEnum ip_type,IP_value::ChoiceIdEnum choiceIpType, const char *str );
			IPAddress( IPAddressEnum ip_type,IP_value::ChoiceIdEnum choiceIpType, const char *str, IPAddressEnum1 choiceIpAssignment );
			//End
			IPAddress (const IPAddress &);
			~IPAddress();
  AsnType		*Clone() const;

  IPAddress		&operator = (const IPAddress &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class GA_PolygonSeq: public AsnType
{
public:
  GeographicalCoordinates		*geographicalCoordinates;

			GA_PolygonSeq();

			//Begin of this was not generated by compiler
			GA_PolygonSeq(GeographicalCoordinatesEnum platitudeSign,int platitude, int plongitude);
			//End of this was not generated by compiler


			GA_PolygonSeq (const GA_PolygonSeq &);
			~GA_PolygonSeq();
  AsnType		*Clone() const;

  GA_PolygonSeq		&operator = (const GA_PolygonSeq &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class Network_Element_Identifier: public AsnType
{
public:
  enum ChoiceIdEnum
  {
     e164_FormatCid = 0,
     x25_FormatCid = 1,
     iP_FormatCid = 2,
     dNS_FormatCid = 3,
     iP_AddressCid = 4
  };

  enum ChoiceIdEnum	choiceId;
  union
  {
     AsnOcts		*e164_Format;
     AsnOcts		*x25_Format;
     AsnOcts		*iP_Format;
     AsnOcts		*dNS_Format;
     IPAddress		*iP_Address;
  };


			Network_Element_Identifier();
            //This is not implement by the snacc
            //Begin
			Network_Element_Identifier(ChoiceIdEnum pchoiceId, const char *str);
			Network_Element_Identifier(ChoiceIdEnum pchoiceId, IPAddressEnum ip_type,IP_value::ChoiceIdEnum choiceIpTypeValue, const char *str );
			Network_Element_Identifier(ChoiceIdEnum pchoiceId, IPAddressEnum ip_type,IP_value::ChoiceIdEnum choiceIpTypeValue, const char *str, IPAddressEnum1 choiceIpAssignment );
			//End

			Network_Element_Identifier (const Network_Element_Identifier &);
			~Network_Element_Identifier();

  AsnType		*Clone() const;

  Network_Element_Identifier		&operator = (const Network_Element_Identifier &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void			Print (std::ostream &os) const;
};


class TimeStamp: public AsnType
{
public:
  enum ChoiceIdEnum
  {
     localTimeCid = 0,
     utcTimeCid = 1
  };

  enum ChoiceIdEnum	choiceId;
  union
  {
     LocalTimeStamp		*localTime;
     UTCTime		*utcTime;
  };


			TimeStamp();
			//Begin this is not generated by compiler
			TimeStamp(const char *utcTimeStr);
			TimeStamp(const char*generalizedTimeStr,LocalTimeStampEnum  pwinterSummerIndication);
            void SetUTCTime(const char *utcTimeStr);
			void SetLocalTimeStamp(const char*generalizedTimeStr,LocalTimeStampEnum  pwinterSummerIndication);
			//End  this is not generated by compiler
			TimeStamp (const TimeStamp &);
			~TimeStamp();

  AsnType		*Clone() const;

  TimeStamp		&operator = (const TimeStamp &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void			Print (std::ostream &os) const;
};


class GA_Polygon: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    GA_PolygonSeq	*elmt;
  }			*first, *curr, *last;

public:
			GA_Polygon() { count = 0; first = curr = last = NULL; }
			GA_Polygon (const GA_Polygon &);
			~GA_Polygon();
  AsnType		*Clone() const;

  GA_Polygon		&operator = (const GA_Polygon &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  GA_PolygonSeq	*First() const	{ return count > 0 ? first->elmt : NULL; }
  GA_PolygonSeq	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  GA_PolygonSeq	*Curr() const	{ return curr ? curr->elmt : NULL; }
  GA_PolygonSeq	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  GA_PolygonSeq	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  GA_PolygonSeq	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  GA_PolygonSeq	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  GA_PolygonSeq	*Append();  // add elmt to end of list
  GA_PolygonSeq	*Append(GeographicalCoordinatesEnum platitudeSign,int platitude, int plongitude);// This was no generated by compiler
  GA_PolygonSeq	*Prepend(); // add elmt to beginning of list
  GA_PolygonSeq	*InsertBefore(); //insert elmt before current elmt
  GA_PolygonSeq	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  GA_Polygon	&AppendCopy (GA_PolygonSeq &elmt);  // add elmt to end of list
  GA_Polygon	&PrependCopy (GA_PolygonSeq &elmt); // add elmt to beginning of list
  GA_Polygon	&InsertBeforeAndCopy (GA_PolygonSeq &elmt); //insert elmt before current elmt
  GA_Polygon	&InsertAfterAndCopy (GA_PolygonSeq &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class Supplementary_Services: public AsnType
{
public:
  Standard_Supplementary_Services		*standard_Supplementary_Services;
  Non_Standard_Supplementary_Services		*non_Standard_Supplementary_Services;
  Other_Services		*other_Services;

			Supplementary_Services();
			Supplementary_Services (const Supplementary_Services &);
			~Supplementary_Services();
  AsnType		*Clone() const;

  Supplementary_Services		&operator = (const Supplementary_Services &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class DataNodeAddress: public AsnType
{
public:
  enum ChoiceIdEnum
  {
     ipAddressCid = 0,
     x25AddressCid = 1
  };

  enum ChoiceIdEnum	choiceId;
  union
  {
     IPAddress		*ipAddress;
     X25Address		*x25Address;
  };


			DataNodeAddress();
			//Begin of this was not generated by snacc
			DataNodeAddress(const char *px25Address );
            DataNodeAddress(IPAddressEnum ip_type,IP_value::ChoiceIdEnum choiceIpTypeValue, const char *pipAddress );
            DataNodeAddress(IPAddressEnum ip_type,IP_value::ChoiceIdEnum choiceIpTypeValue, const char *pipAddress, IPAddressEnum1 choiceIpAssignment );
			//End of this was not generated by snacc
			DataNodeAddress (const DataNodeAddress &);
			~DataNodeAddress();

  AsnType		*Clone() const;

  DataNodeAddress		&operator = (const DataNodeAddress &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void			Print (std::ostream &os) const;
};


class Network_Identifier: public AsnType
{
public:
  AsnOcts		operator_Identifier;
  Network_Element_Identifier		*network_Element_Identifier;

			Network_Identifier();
			Network_Identifier (const Network_Identifier &);
			~Network_Identifier();
  AsnType		*Clone() const;

  Network_Identifier		&operator = (const Network_Identifier &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;

    //Factoruy
    Network_Identifier(const char*str);
    void CreateNetworkElementIdentifier(){};
};


class UMTSLocation: public AsnType
{
public:
  enum ChoiceIdEnum
  {
     pointCid = 0,
     pointWithUnCertaintyCid = 1,
     polygonCid = 2
  };

  enum ChoiceIdEnum	choiceId;
  union
  {
     GA_Point		*point;
     GA_PointWithUnCertainty		*pointWithUnCertainty;
     GA_Polygon		*polygon;
  };


			UMTSLocation();
			//Begin this was not generated by snacc
			UMTSLocation(GeographicalCoordinatesEnum platitudeSign,int platitude, int plongitude,unsigned int puncertaintyCode);
			UMTSLocation(GeographicalCoordinatesEnum platitudeSign,int platitude, int plongitude);
            void  AddPointToGAPolygon(GeographicalCoordinatesEnum platitudeSign,int platitude, int plongitude);
			//End this was not generated by snacc
			UMTSLocation (const UMTSLocation &);
			~UMTSLocation();

  AsnType		*Clone() const;

  UMTSLocation		&operator = (const UMTSLocation &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void			Print (std::ostream &os) const;
};


class GPRS_parameters: public AsnType
{
public:
  DataNodeAddress		*pDP_address_allocated_to_the_target;
  AsnOcts		*aPN;
  AsnOcts		*pDP_type;

			GPRS_parameters();
			GPRS_parameters (const GPRS_parameters &);
			~GPRS_parameters();
  AsnType		*Clone() const;

  GPRS_parameters		&operator = (const GPRS_parameters &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class CommunicationIdentifier: public AsnType
{
public:
  AsnOcts		*communication_Identity_Number;
  Network_Identifier		*network_Identifier;

			CommunicationIdentifier();
			CommunicationIdentifier (const CommunicationIdentifier &);
			~CommunicationIdentifier();
  AsnType		*Clone() const;

  CommunicationIdentifier		&operator = (const CommunicationIdentifier &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;

    //Factoria
    CommunicationIdentifier(const char*operatorIdentifier);
    void CreateCommunicationIdentityNumber(){};
};


class Services_Data_Information: public AsnType
{
public:
  GPRS_parameters		*gPRS_parameters;

			Services_Data_Information();
			Services_Data_Information (const Services_Data_Information &);
			~Services_Data_Information();
  AsnType		*Clone() const;

  Services_Data_Information		&operator = (const Services_Data_Information &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};











//Party






class Location: public AsnType
{
public:
  AsnOcts		*e164_Number;
  AsnOcts		*globalCellID;
  TetraLocation		*tetraLocation;
  AsnOcts		*rAI;
  GSMLocation		*gsmLocation;
  UMTSLocation		*umtsLocation;
  AsnOcts		*sAI;

			Location();
			Location (const Location &);
			~Location();
  AsnType		*Clone() const;

  Location		&operator = (const Location &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class CallContentLinkCharacteristics: public AsnType
{
public:
  CCLink_State		*cCLink_State;
  TimeStamp		*release_Time;
  AsnOcts		*release_Reason;
  CalledPartyNumber		*lEMF_Address;

			CallContentLinkCharacteristics();
			CallContentLinkCharacteristics (const CallContentLinkCharacteristics &);
			~CallContentLinkCharacteristics();
  AsnType		*Clone() const;

  CallContentLinkCharacteristics		&operator = (const CallContentLinkCharacteristics &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class SMS_report: public AsnType
{
public:
  CommunicationIdentifier		*communicationIdentifier;
  TimeStamp		*timeStamp;
  SMS_reportSeq		*sMS_Contents;

			SMS_report();
			SMS_report (const SMS_report &);
			~SMS_report();
  AsnType		*Clone() const;

  SMS_report		&operator = (const SMS_report &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


class National_Parameters: public AsnType
{
protected:
  unsigned long int	count;
  struct AsnListElmt
  {
    AsnListElmt	*next;
    AsnListElmt	*prev;
    AsnOcts	*elmt;
  }			*first, *curr, *last;

public:
			National_Parameters() { count = 0; first = curr = last = NULL; }
			National_Parameters (const National_Parameters &);
			~National_Parameters();
  AsnType		*Clone() const;

  National_Parameters		&operator = (const National_Parameters &);
  void		SetCurrElmt (unsigned long int index);
  unsigned long int	GetCurrElmtIndex();
  void		SetCurrToFirst() { curr = first; }
  void		SetCurrToLast()  { curr = last; }
  // reading member fcns
  int			Count() const	{ return count; }
  // NOTE: if your compiler complains about these NULLs, its definition of NULL is broken (and you better change it there!)
  AsnOcts	*First() const	{ return count > 0 ? first->elmt : NULL; }
  AsnOcts	*Last() const	{ return count > 0 ? last->elmt : NULL; }
  AsnOcts	*Curr() const	{ return curr ? curr->elmt : NULL; }
  AsnOcts	*Next() const	{ return curr && curr->next ? curr->next->elmt : NULL; }
  AsnOcts	*Prev() const	{ return curr && curr->prev ? curr->prev->elmt : NULL; }

  // routines that move the curr elmt
  AsnOcts	*GoNext() { if (curr) curr = curr->next; return Curr(); }
  AsnOcts	*GoPrev() { if (curr) curr = curr->prev; return Curr(); }

  // write & alloc fcns - returns new elmt
  AsnOcts	*Append();  // add elmt to end of list
  AsnOcts	*Prepend(); // add elmt to beginning of list
  AsnOcts	*InsertBefore(); //insert elmt before current elmt
  AsnOcts	*InsertAfter(); //insert elmt after current elmt

  // write & alloc & copy - returns list after copying elmt
  National_Parameters	&AppendCopy (AsnOcts &elmt);  // add elmt to end of list
  National_Parameters	&PrependCopy (AsnOcts &elmt); // add elmt to beginning of list
  National_Parameters	&InsertBeforeAndCopy (AsnOcts &elmt); //insert elmt before current elmt
  National_Parameters	&InsertAfterAndCopy (AsnOcts &elmt); //insert elmt after current elmt

  // removing the current elmt from the list
  void		RemoveCurrFromList();

  // encode and decode routines
  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  PDU_MEMBER_MACROS
  void		Print (std::ostream &os) const;
};


class National_HI2_ASN1parameters: public AsnType
{
public:
  PrintableString		countryCode;

			National_HI2_ASN1parameters();
			National_HI2_ASN1parameters (const National_HI2_ASN1parameters &);
			~National_HI2_ASN1parameters();
  AsnType		*Clone() const;

  National_HI2_ASN1parameters		&operator = (const National_HI2_ASN1parameters &);
  AsnLen		BEncContent (BUF_TYPE b);
  void			BDecContent (BUF_TYPE b, AsnTag tag, AsnLen elmtLen, AsnLen &bytesDecoded, ENV_TYPE env);

  AsnLen		BEnc (BUF_TYPE b);
  void			BDec (BUF_TYPE b, AsnLen &bytesDecoded, ENV_TYPE env);
  int			BEncPdu (BUF_TYPE b, AsnLen &bytesEncoded);
  int			BDecPdu (BUF_TYPE b, AsnLen &bytesDecoded);

  void		Print (std::ostream &os) const;
};


//------------------------------------------------------------------------------
// externs for value defs

extern const AsnOid domainIDO;
extern const AsnInt maxNrOfPoints;
//------------------------------------------------------------------------------

#endif /* conditional include of ParametersFormat.h */
